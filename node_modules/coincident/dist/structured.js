const e="object"==typeof self?self:globalThis,r=r=>((r,t)=>{const n=(e,t)=>(r.set(t,e),e),s=c=>{if(r.has(c))return r.get(c);const[a,o]=t[c];switch(a){case 0:case-1:return n(o,c);case 1:{const e=n([],c);for(const r of o)e.push(s(r));return e}case 2:{const e=n({},c);for(const[r,t]of o)e[s(r)]=s(t);return e}case 3:return n(new Date(o),c);case 4:{const{source:e,flags:r}=o;return n(new RegExp(e,r),c)}case 5:{const e=n(new Map,c);for(const[r,t]of o)e.set(s(r),s(t));return e}case 6:{const e=n(new Set,c);for(const r of o)e.add(s(r));return e}case 7:{const{name:r,message:t}=o;return n(new e[r](t),c)}case 8:return n(BigInt(o),c);case"BigInt":return n(Object(BigInt(o)),c);case"ArrayBuffer":return n(new Uint8Array(o).buffer,o);case"DataView":{const{buffer:e}=new Uint8Array(o);return n(new DataView(e),o)}}return n(new e[a](o),c)};return s})(new Map,r)(0),t="",{toString:n}={},{keys:s}=Object,c=e=>{const r=typeof e;if("object"!==r||!e)return[0,r];const s=n.call(e).slice(8,-1);switch(s){case"Array":return[1,t];case"Object":return[2,t];case"Date":return[3,t];case"RegExp":return[4,t];case"Map":return[5,t];case"Set":return[6,t];case"DataView":return[1,s]}return s.includes("Array")?[1,s]:s.includes("Error")?[7,s]:[2,s]},a=([e,r])=>0===e&&("function"===r||"symbol"===r),o=(e,{json:r,lossy:t}={})=>{const n=[];return((e,r,t,n)=>{const o=(e,r)=>{const s=n.push(e)-1;return t.set(r,s),s},u=n=>{if(t.has(n))return t.get(n);let[f,i]=c(n);switch(f){case 0:{let r=n;switch(i){case"bigint":f=8,r=n.toString();break;case"function":case"symbol":if(e)throw new TypeError("unable to serialize "+i);r=null;break;case"undefined":return o([-1],n)}return o([f,r],n)}case 1:{if(i){let e=n;return"DataView"===i?e=new Uint8Array(n.buffer):"ArrayBuffer"===i&&(e=new Uint8Array(n)),o([i,[...e]],n)}const e=[],r=o([f,e],n);for(const r of n)e.push(u(r));return r}case 2:{if(i)switch(i){case"BigInt":return o([i,n.toString()],n);case"Boolean":case"Number":case"String":return o([i,n.valueOf()],n)}if(r&&"toJSON"in n)return u(n.toJSON());const t=[],l=o([f,t],n);for(const r of s(n))!e&&a(c(n[r]))||t.push([u(r),u(n[r])]);return l}case 3:return o([f,n.toISOString()],n);case 4:{const{source:e,flags:r}=n;return o([f,{source:e,flags:r}],n)}case 5:{const r=[],t=o([f,r],n);for(const[t,s]of n)(e||!a(c(t))&&!a(c(s)))&&r.push([u(t),u(s)]);return t}case 6:{const r=[],t=o([f,r],n);for(const t of n)!e&&a(c(t))||r.push(u(t));return t}}const{message:l}=n;return o([f,{name:i,message:l}],n)};return u})(!(r||t),!!r,new Map,n)(e),n},{parse:u,stringify:f}=JSON,i={json:!0,lossy:!0};let l="coincident-";try{new SharedArrayBuffer(4,{maxByteLength:8}),l+=crypto.randomUUID()}catch(e){l+=Math.random().toString(36).substring(2)}const g=e=>r(u(e)),w=e=>f(o(e,i));export{g as decode,w as encode};
